import { Bot, Context } from "grammy";
import { PublishPostUseCase } from "../application/publish-post.use-case";
import { InvalidTweetUrlError, MediaDownloadError } from "../domain/errors";
import { logger } from "../../../shared/logging/logger";
import { env } from "../../../shared/config/env";
import { TWEET_QUOTE_MARKER } from "../domain/models";

const tweetLinkRegex = /(https?:\/\/(?:www\.)?(?:twitter|x)\.com\/[^\s]+)/i;
const quoteTokenDetectionRegex = /(?:^|\s)(—Ç–≤–∏|twi)(?=\s|$)/iu;
const quoteTokenRemovalRegex = /(?:^|\s)(—Ç–≤–∏|twi)(?=\s|$)/giu;
const clearQueueRegex = /^\s*(clean\s+queue|–æ—á–∏—Å—Ç–∏—Ç—å\s+–æ—á–µ—Ä–µ–¥—å|–æ—á–µ—Ä–µ–¥—å\s+–æ—á–∏—Å—Ç–∏—Ç—å)\s*$/i;
const queueStatusRegex = /^\s*(queue\s+status|—Å—Ç–∞—Ç—É—Å\s+–æ—á–µ—Ä–µ–¥–∏|–æ—á–µ—Ä–µ–¥—å\s+—Å—Ç–∞—Ç—É—Å)\s*$/i;

export const registerPublishPostHandler = (bot: Bot<Context>, useCase: PublishPostUseCase) => {
  const processPost = async (ctx: Context, text: string): Promise<void> => {
    try {
      const { tweetUrl, userText } = parsePayload(text);
      await ctx.reply("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...", { reply_to_message_id: ctx.message!.message_id });
      await useCase.execute({
        requesterId: ctx.from?.id ?? 0,
        tweetUrl,
        userText
      });
      await ctx.reply("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª", { reply_to_message_id: ctx.message!.message_id });
    } catch (error) {
      if (error instanceof InvalidTweetUrlError) {
        await ctx.reply("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç Twitter/X", { reply_to_message_id: ctx.message?.message_id });
        return;
      }
      logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", { error });
      if (error instanceof MediaDownloadError) {
        await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è –∏–∑ Twitter/X", { reply_to_message_id: ctx.message!.message_id });
      } else {
        await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞", { reply_to_message_id: ctx.message!.message_id });
      }
    }
  };

  bot.on("message:text", async (ctx) => {
    const text = ctx.message?.text ?? "";
    
    // Check for clear queue command
    if (clearQueueRegex.test(text)) {
      try {
        const requesterId = ctx.from?.id ?? 0;
        await ctx.reply("üóëÔ∏è –û—á–∏—â–∞—é –æ—á–µ—Ä–µ–¥—å...", { reply_to_message_id: ctx.message?.message_id });
        await useCase.clearQueue(requesterId);
      } catch (error) {
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –æ—á–µ—Ä–µ–¥–∏", { error });
        await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –æ—á–µ—Ä–µ–¥–∏", { reply_to_message_id: ctx.message?.message_id });
      }
      return;
    }

    // Check for queue status command
    if (queueStatusRegex.test(text)) {
      try {
        const requesterId = ctx.from?.id ?? 0;
        await useCase.getQueueStatus(requesterId);
      } catch (error) {
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ—á–µ—Ä–µ–¥–∏", { error });
        await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ—á–µ—Ä–µ–¥–∏", { reply_to_message_id: ctx.message?.message_id });
      }
      return;
    }

    // Check for tweet links
    if (!tweetLinkRegex.test(text)) {
      await ctx.reply(`–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: ${env.appVersion}`, { reply_to_message_id: ctx.message?.message_id });
      return;
    }

    await processPost(ctx, text);
  });
};

const parsePayload = (text: string) => {
  const urlMatch = text.match(tweetLinkRegex);
  if (!urlMatch) {
    throw new InvalidTweetUrlError();
  }
  const tweetUrl = urlMatch[1];
  const payloadWithoutUrl = text.replace(urlMatch[0], " ");
  const hasQuoteToken = quoteTokenDetectionRegex.test(payloadWithoutUrl);
  let userText = payloadWithoutUrl.replace(quoteTokenRemovalRegex, " ").replace(tweetLinkRegex, " ");
  userText = userText.replace(/\s+/g, " ").trim();

  if (hasQuoteToken) {
    userText = userText.length > 0 ? `${userText}\n\n${TWEET_QUOTE_MARKER}` : TWEET_QUOTE_MARKER;
  }

  return { tweetUrl, userText };
};
