import { Api } from "grammy";
import { logger } from "../../../shared/logging/logger";
import { VideoVariantsInfo } from "../domain/models";
import { PublishPostNotifier } from "../application/publish-post.use-case";

const moscowFormatter = new Intl.DateTimeFormat("ru-RU", {
  timeZone: "Europe/Moscow",
  year: "numeric",
  month: "2-digit",
  day: "2-digit",
  hour: "2-digit",
  minute: "2-digit",
  second: "2-digit"
});

export class TelegramUserNotifier implements PublishPostNotifier {
  constructor(private readonly api: Api) {}

  async notifyRateLimit(requesterId: number, retryAt: number, message: string): Promise<void> {
    const formattedTime = moscowFormatter.format(new Date(retryAt));
    const text = [
      "‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–ª–æ–∂–µ–Ω –∏–∑-–∑–∞ –ª–∏–º–∏—Ç–∞ Twitter/X.",
      message,
      `–ù–æ–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ—Å–ª–µ ${formattedTime} (–ú–°–ö).`
    ]
      .filter(Boolean)
      .join("\n");

    await this.safeSendMessage(requesterId, text);
  }

  async notifyVideoVariants(requesterId: number, variants: VideoVariantsInfo[]): Promise<void> {
    if (variants.length === 0) {
      return;
    }

    const lines: string[] = ["üéû –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤–∏–¥–µ–æ:"];

    for (const info of variants) {
      lines.push(`–í–∏–¥–µ–æ ${info.mediaIndex}:`);
      for (const option of info.options) {
        const parts: string[] = [];
        if (option.width && option.height) {
          parts.push(`${option.width}x${option.height}`);
        }
        if (option.bitrate) {
          const kbps = Math.round(option.bitrate / 1000);
          parts.push(`${kbps} –∫–±–∏—Ç/—Å`);
        }
        if (parts.length === 0) {
          parts.push("—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã");
        }
        lines.push(`‚Ä¢ ${parts.join(", ")}`);
        lines.push(option.url);
      }
    }
    const text = ["```", ...lines, "```"];
    await this.safeSendMessage(requesterId, text.join("\n"), "MarkdownV2");
  }

  async notifyRetry(requesterId: number, currentRetry: number, maxRetries: number, retryAt: number): Promise<void> {
    const formattedTime = moscowFormatter.format(new Date(retryAt));
    const text = [
      `üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ ${currentRetry}/${maxRetries}.`,
      `–°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ—Å–ª–µ ${formattedTime} (–ú–°–ö).`
    ].join("\\n");

    await this.safeSendMessage(requesterId, text);
  }

  async notifyQueueCleared(requesterId: number, clearedCount: number): Promise<void> {
    const text = `üóëÔ∏è –û—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: ${clearedCount}`;
    await this.safeSendMessage(requesterId, text);
  }

  async notifyQueueStatus(requesterId: number, status: any[]): Promise<void> {
    if (status.length === 0) {
      await this.safeSendMessage(requesterId, "üìä –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞");
      return;
    }

    const lines: string[] = ["üìä –°—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏:"];
    
    for (const item of status) {
      const earliestDate = item.earliest_available 
        ? moscowFormatter.format(new Date(item.earliest_available))
        : 'N/A';
      
      lines.push(`${item.status}: ${item.count} –∑–∞–¥–∞–Ω–∏–π (–º–∞–∫—Å. –ø–æ–ø—ã—Ç–æ–∫: ${item.max_retries || 0})`);
      if (item.earliest_available) {
        lines.push(`  —Å–ª–µ–¥—É—é—â–µ–µ: ${earliestDate} (–ú–°–ö)`);
      }
    }

    await this.safeSendMessage(requesterId, lines.join("\\n"));
  }

  private async safeSendMessage(requesterId: number, text: string, parseMode?: "MarkdownV2"): Promise<void> {
    if (!requesterId) {
      return;
    }

    try {
      await this.api.sendMessage(requesterId, text, { parse_mode: parseMode });
    } catch (error) {
      logger.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", { requesterId, error });
    }
  }
}
